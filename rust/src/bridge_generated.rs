#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_decode_single_frame_image(port_: i64, avif_bytes: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "decode_single_frame_image",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_avif_bytes = avif_bytes.wire2api();
            move |task_callback| Ok(decode_single_frame_image(api_avif_bytes))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_init_memory_decoder(
    port_: i64,
    key: *mut wire_uint_8_list,
    avif_bytes: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_memory_decoder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_avif_bytes = avif_bytes.wire2api();
            move |task_callback| Ok(init_memory_decoder(api_key, api_avif_bytes))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_reset_decoder(port_: i64, key: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "reset_decoder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Ok(reset_decoder(api_key))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_dispose_decoder(port_: i64, key: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dispose_decoder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Ok(dispose_decoder(api_key))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_next_frame(port_: i64, key: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_next_frame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Ok(get_next_frame(api_key))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_encode_avif(
    port_: i64,
    width: u32,
    height: u32,
    speed: i32,
    max_threads: i32,
    timescale: u64,
    max_quantizer: i32,
    min_quantizer: i32,
    max_quantizer_alpha: i32,
    min_quantizer_alpha: i32,
    image_sequence: *mut wire_list_encode_frame,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "encode_avif",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_width = width.wire2api();
            let api_height = height.wire2api();
            let api_speed = speed.wire2api();
            let api_max_threads = max_threads.wire2api();
            let api_timescale = timescale.wire2api();
            let api_max_quantizer = max_quantizer.wire2api();
            let api_min_quantizer = min_quantizer.wire2api();
            let api_max_quantizer_alpha = max_quantizer_alpha.wire2api();
            let api_min_quantizer_alpha = min_quantizer_alpha.wire2api();
            let api_image_sequence = image_sequence.wire2api();
            move |task_callback| {
                Ok(encode_avif(
                    api_width,
                    api_height,
                    api_speed,
                    api_max_threads,
                    api_timescale,
                    api_max_quantizer,
                    api_min_quantizer,
                    api_max_quantizer_alpha,
                    api_min_quantizer_alpha,
                    api_image_sequence,
                ))
            }
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_EncodeFrame {
    data: *mut wire_uint_8_list,
    duration_in_timescale: u64,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_encode_frame {
    ptr: *mut wire_EncodeFrame,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_list_encode_frame(len: i32) -> *mut wire_list_encode_frame {
    let wrap = wire_list_encode_frame {
        ptr: support::new_leak_vec_ptr(<wire_EncodeFrame>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<EncodeFrame> for wire_EncodeFrame {
    fn wire2api(self) -> EncodeFrame {
        EncodeFrame {
            data: self.data.wire2api(),
            duration_in_timescale: self.duration_in_timescale.wire2api(),
        }
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<Vec<EncodeFrame>> for *mut wire_list_encode_frame {
    fn wire2api(self) -> Vec<EncodeFrame> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}

impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_EncodeFrame {
    fn new_with_null_ptr() -> Self {
        Self {
            data: core::ptr::null_mut(),
            duration_in_timescale: Default::default(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for AvifInfo {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.width.into_dart(),
            self.height.into_dart(),
            self.image_count.into_dart(),
            self.duration.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AvifInfo {}

impl support::IntoDart for Frame {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.data.into_dart(),
            self.duration.into_dart(),
            self.width.into_dart(),
            self.height.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Frame {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
